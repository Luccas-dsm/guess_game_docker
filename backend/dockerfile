# Backend Dockerfile - Corrigido
FROM python:3.11-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    postgresql-dev \
    gcc \
    musl-dev \
    curl \
    && rm -rf /var/cache/apk/*

# Create app user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies including gunicorn
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir gunicorn

# Copy application code
COPY run.py .
COPY guess/ ./guess/
COPY repository/ ./repository/

# Ensure __init__.py files exist
RUN touch ./guess/__init__.py ./repository/__init__.py 2>/dev/null || true

# Create necessary directories and set permissions
RUN mkdir -p /app/db && \
    chown -R appuser:appgroup /app

# Set environment variables
ENV PYTHONPATH=/app
ENV FLASK_APP=run.py
ENV FLASK_ENV=production

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Use flask run para desenvolvimento, mas funciona bem para esse projeto
CMD ["python", "-c", "from guess import create_app; app = create_app(); app.run(host='0.0.0.0', port=5000, debug=False)"]