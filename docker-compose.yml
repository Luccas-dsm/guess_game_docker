version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: guess-game-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpass}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend Flask Application (Multiple instances for load balancing)
  backend:
    build:
      context: ./
      dockerfile: backend/dockerfile
    environment:
      FLASK_APP: run.py
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_DB_TYPE: postgres
      FLASK_DB_USER: ${POSTGRES_USER:-postgres}
      FLASK_DB_NAME: ${POSTGRES_DB:-postgres}
      FLASK_DB_PASSWORD: ${POSTGRES_PASSWORD:-secretpass}
      FLASK_DB_HOST: postgres
      FLASK_DB_PORT: 5432
      PYTHONPATH: /app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3  # Multiple instances for load balancing
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile
      args:
        # Frontend should call the nginx proxy, not backend directly
        REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL:-http://localhost:8080}
    networks:
      - frontend-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # NGINX Proxy Reverso
  nginx:
    build:
      context: ./nginx
      dockerfile: dockerfile
    ports:
      - "${NGINX_PORT:-8080}:80"
      - "${NGINX_SSL_PORT:-8443}:443"
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - frontend-network
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

networks:
  backend-network:
    driver: bridge
    internal: true  # Backend network is internal for security
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  nginx_cache:
    driver: local